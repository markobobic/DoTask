@model DoTask.VievModels.AssignmentUpdateViewModel
@{ Layout = null; }
@{ var projectId = Model.ProjectId == null? 0 : Model.ProjectId ;

    var projectManagerId = Model.ProjectManagerId; }
    <head>
        <link href="~/Content/bootstrap-datetimepicker.min.css" rel="stylesheet" />
    </head>
@Html.HiddenFor(model=>model.Id)

@using (Html.BeginForm("Update", "Assignment", FormMethod.Post, new { onsubmit = "return SubmitForm(this)" }))
{
@Html.AntiForgeryToken()
    <div class="form-group">
        @Html.LabelFor(model => model.AssigmentName, htmlAttributes: new { @class = "control-label col-md-8" })
        <div class="row">
            @Html.EditorFor(model => model.AssigmentName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AssigmentName, "", new { @class = "text-danger" })
        </div>
    </div>
    
     <div class="form-group">
        @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-6" })
        <div class="row">
            @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control datetimepicker" } })
            @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Deadline, htmlAttributes: new { @class = "control-label col-md-6" })
        <div class="row">
            @Html.EditorFor(model => model.Deadline, new { htmlAttributes = new { @class = "form-control datetimepicker" } })
            @Html.ValidationMessageFor(model => model.Deadline, "", new { @class = "text-danger" })
        </div>
    </div>
     <div class="form-group">
        @Html.LabelFor(model => model.Progress, htmlAttributes: new { @class = "control-label col-md-8" })
        <div class="row">
            @Html.EditorFor(model => model.Progress, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Progress, "", new { @class = "text-danger" })
        </div>
    </div>
    if(ViewBag.Developers != null) { 
    <div class="form-group" id="dropDownrDevelopers">
        <label class="control-label col-md-6" for="DeveloperId">Developers</label>
        <div class="texte-center row">
            @Html.DropDownList("DeveloperId", (IEnumerable<SelectListItem>)ViewBag.Developers, null, new { @class = "form-control" })
        </div>
    </div>

     <div class="form-group" id="dropdownProjects">
        <label class="control-label col-md-6" for="ProjectId">Projects</label>
        <div class="texte-center row">
            @Html.DropDownList("ProjectId", (IEnumerable<SelectListItem>)ViewBag.Projects, null, new { @class = "form-control" })
        </div>
    </div>

    }
    else
    {
        @*<div class="form-group" id="dropDownrProjectManagers">
        <label class="control-label col-md-6" for="ProjectManagerId">Project Managers</label>
        <div class="texte-center row">
            @Html.DropDownList("ProjectManagerId", (IEnumerable<SelectListItem>)ViewBag.ProjectManagers, null, new { @class = "form-control" })
        </div>
    </div>*@
        

      <div class="form-group" id="dropdownProjectManager">
        <div class="row">
            <label class="control-label col-md-6" for="ProjectManagerId">Project Manager</label>
            <select  class="form-control" id="projectManagers" name="ProjectManagerId">

            </select>
        </div>
      </div>


      <div class="form-group" id="dropdDownForProjectManager">
            <div class="row">
                <label for="ProjectId">Projects</label>
                <select class="form-control" id="projects" name="ProjectId">
                </select>
            </div>
        </div>


    }

   
    <div class="form-group" id="dropdownStatuses">
        <label class="control-label col-md-6" for="StatusId">Status</label>
        <div class="texte-center row">
            @Html.DropDownList("StatusId", (IEnumerable<SelectListItem>)ViewBag.Statuses, null, new { @class = "form-control" })
        </div>
    </div>
     <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-8" })
        <div class="row">
            @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = 5, id = "description" })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

        <div class="form-group">
            <div class="text-center">
                <input type="submit" class="btn btn-success" value="Save" />
                <button type="button" class="btn btn-default" data-dismiss="modal" aria-label="Close">Cancel</button>
            </div>
        </div>                  

}

  <script src="@Url.Content("~/Scripts/jquery.validate.min.js")"
            type="text/javascript">
    </script>

    <script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")"
            type="text/javascript">
    </script>


<script src="~/Scripts/bootstrap-datetimepicker.min.js"></script>
<script src="~/Scripts/moment.min.js"></script>
<script>



    $(function () {
        $('.datetimepicker').datetimepicker({
            format: 'DD/MM/YYYY'
        });

        $('.datetimepicker-addon').on('click', function () {
            $(this).prev('input.datetimepicker').data('DateTimePicker').toggle();
        });
    });

    $(document).ready(function () {
         let projectId = @Html.Raw(projectId);
        let projectManagerId = '@Model.ProjectManagerId';
        console.log(projectManagerId);
        $.getJSON('/Assignment/GetProjectManager', null, function (data) {
            $.each(data, function () {
                if (projectManagerId === this.Id) {
                    $('#projectManagers').append('<option selected value=' +
                        this.Id + '>' + this.Name + '</option>');
                } else if (projectManagerId !== this.Id) {
                $('#projectManagers').append('<option value=' +
                    this.Id + '>' + this.Name + '</option>');
                }
            });
            $.getJSON('/Assignment/GetProjects', { projectManagerId: $('#projectManagers').val() }, function (data) {
                $.each(data, function () {
                    if (projectId === this.ProjectId) {
                        $('#projects').append('<option selected  value=' +
                            this.ProjectId + '>' + this.Name + '</option>');
                    } else if (projectManagerId !== this.ProjectId) {
                        $('#projects').append('<option value=' +
                            this.ProjectId + '>' + this.Name + '</option>');
                    }

                });
            }).fail(function (jqXHR, textStatus, errorThrown) {
                //alert('Error getting client sectors!');
            });
        }).fail(function (jqXHR, textStatus, errorThrown) {
            alert('Error getting projects!');
        });

        $('#projectManagers').change(function () {
            $('#projects option').remove();
            $.getJSON('/Assignment/GetProjects', { projectManagerId: $('#projectManagers').val() }, function (data) {
                $.each(data, function () {
                    $('#projects').append('<option value=' +
                        this.ProjectId + '>' + this.Name + '</option>');
                });
            }).fail(function (jqXHR, textStatus, errorThrown) {
                alert('Error getting project managers!');
            });
        });
    });

</script>

<style>
    .form-control {
        margin-left: 5%;
    }
</style>

